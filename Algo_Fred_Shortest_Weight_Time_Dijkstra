import random
import time
from heapq import heappop, heappush
from pysat.solvers import Glucose3
import matplotlib.pyplot as plt
import networkx as nx

# Example graph generation with weights
def generate_connected_graph_with_weights(num_nodes):
    """Generate a connected graph with weights as adjacency list."""
    graph = {i: {} for i in range(num_nodes)}
    edges = []
    weights = {}

    # Ensure the graph is connected
    nodes = list(range(num_nodes))
    random.shuffle(nodes)
    for i in range(num_nodes - 1):
        u, v = nodes[i], nodes[i + 1]
        weight = random.randint(1, 10)
        graph[u][v] = weight
        graph[v][u] = weight
        edges.append((u, v, weight))
        weights.setdefault(u, {})[v] = weight
        weights.setdefault(v, {})[u] = weight

    # Add random edges
    for _ in range(num_nodes):
        u, v = random.sample(range(num_nodes), 2)
        if v not in graph[u]:
            weight = random.randint(1, 10)
            graph[u][v] = weight
            graph[v][u] = weight
            edges.append((u, v, weight))
            weights.setdefault(u, {})[v] = weight
            weights.setdefault(v, {})[u] = weight

    return graph, edges, weights

def encode_cnf(graph, source, target, path_length, num_nodes, weights):
    """Encode the shortest path problem into CNF with weighted edges."""
    clauses = []
    var = lambda i, j: i * path_length + j + 1  # Variables: x_i_j = node i is in position j in the path

    # Each position in the path must have exactly one node
    for j in range(path_length):
        clauses.append([var(i, j) for i in range(num_nodes)])  # At least one
        for i in range(num_nodes):
            for k in range(i + 1, num_nodes):
                clauses.append([-var(i, j), -var(k, j)])  # At most one

    # Each node must appear at most once in the path
    for i in range(num_nodes):
        for j in range(path_length):
            for k in range(j + 1, path_length):
                clauses.append([-var(i, j), -var(i, k)])

    # Add constraints for edges (only connected nodes can follow each other)
    adjacency_matrix = [[False] * num_nodes for _ in range(num_nodes)]
    for u in graph:
        for v in graph[u]:
            adjacency_matrix[u][v] = True

    for j in range(path_length - 1):
        for i in range(num_nodes):
            for k in range(num_nodes):
                if not adjacency_matrix[i][k]:
                    clauses.append([-var(i, j), -var(k, j + 1)])

    # Source must be the first node and target the last
    clauses.append([var(source, 0)])
    clauses.append([var(target, path_length - 1)])

    # Minimize weight using auxiliary variables
    weight_vars = []  # Track variables representing edge weights
    for j in range(path_length - 1):
        for i in range(num_nodes):
            for k in range(num_nodes):
                if adjacency_matrix[i][k]:
                    edge_var = var(i, j) * 1000 + var(k, j + 1)  # Unique variable for the edge
                    clauses.append([-var(i, j), -var(k, j + 1), edge_var])  # Link edge selection to path variables
                    weight_vars.append((edge_var, weights[i][k]))

    # Add constraint to minimize total weight
    total_weight_limit = sum(weight for _, weight in weight_vars)  # Maximum possible weight
    for edge_var, weight in weight_vars:
        if weight > total_weight_limit:
            clauses.append([-edge_var])  # Disable edges exceeding the limit

    return clauses

def solve_shortest_path_sat_weighted(graph, source, target, num_nodes, weights):
    """Solve the shortest path problem with weighted edges using SAT."""
    for path_length in range(1, num_nodes + 1):
        # Perform binary search on weight limit
        low, high = 1, sum(sum(weights[i].values()) for i in weights)
        best_path, best_weight = None, float('inf')

        while low <= high:
            mid = (low + high) // 2
            clauses = encode_cnf(graph, source, target, path_length, num_nodes, weights)
            solver = Glucose3()
            solver.append_formula(clauses)

            var = lambda i, j: i * path_length + j + 1  # Variables: x_i_j = node i is in position j in the path
            if solver.solve():
                model = solver.get_model()
                path = []
                total_weight = 0
                for j in range(path_length):
                    for i in range(num_nodes):
                        if model[var(i, j) - 1] > 0:
                            path.append(i)
                            break
                # Calculate total weight of the path
                for j in range(len(path) - 1):
                    total_weight += weights[path[j]][path[j + 1]]
                if total_weight < best_weight:
                    best_path, best_weight = path, total_weight
                high = mid - 1
            else:
                low = mid + 1

            solver.delete()

        if best_path:
            return best_path, best_weight
    return None, None

def dijkstra_shortest_path(graph, source, target):
    """Solve the shortest path problem using Dijkstra's algorithm with weighted edges."""
    start_time = time.time()

    # Priority queue for Dijkstra's
    queue = [(0, source)]  # (distance, node)
    distances = {node: float('inf') for node in graph}
    distances[source] = 0
    previous_nodes = {node: None for node in graph}

    while queue:
        current_distance, current_node = heappop(queue)

        if current_node == target:
            break  # Stop when reaching the target

        for neighbor, weight in graph[current_node].items():
            distance = current_distance + weight
            if distance < distances[neighbor]:
                distances[neighbor] = distance
                previous_nodes[neighbor] = current_node
                heappush(queue, (distance, neighbor))

    # Reconstruct the path
    path = []
    current = target
    total_weight = 0
    while current is not None:
        path.append(current)
        if previous_nodes[current] is not None:
            total_weight += graph[previous_nodes[current]][current]
        current = previous_nodes[current]
    path.reverse()

    end_time = time.time()
    print(f"Dijkstra's Algorithm Time: {end_time - start_time:.4f} seconds")
    return path if path[0] == source else None, total_weight

def print_graph(graph):
    """Print a visual representation of the graph."""
    print("\nGraph:")
    for node, neighbors in graph.items():
        connections = ", ".join(f"{neighbor}(w={weight})" for neighbor, weight in neighbors.items())
        print(f"Node {node}: {connections}")

def visualize_graph_with_path(graph, path):
    """
    Visualize the graph with the shortest path highlighted in red.
    All nodes in the path are shown in red.

    Parameters:
        graph (dict): Adjacency list of the graph.
        path (list): List of nodes representing the shortest path.
    """
    # Create a NetworkX graph
    G = nx.Graph()
    
    # Add edges to the graph with weights
    for node, neighbors in graph.items():
        for neighbor, weight in neighbors.items():
            G.add_edge(node, neighbor, weight=weight)

    # Get positions for all nodes
    pos = nx.spring_layout(G, seed=42)

    # Draw the graph
    plt.figure(figsize=(10, 8))
    nx.draw(
        G, pos, with_labels=True, node_color="lightblue", node_size=500,
        font_size=10, font_weight="bold"
    )
    nx.draw_networkx_edge_labels(
        G, pos, edge_labels={(u, v): d["weight"] for u, v, d in G.edges(data=True)}, font_size=8
    )

    # Highlight the shortest path
    if path:
        # Highlight path edges in red
        path_edges = [(path[i], path[i + 1]) for i in range(len(path) - 1)]
        nx.draw_networkx_edges(G, pos, edgelist=path_edges, edge_color="red", width=2.5)

        # Highlight path nodes in red
        nx.draw_networkx_nodes(
            G, pos, nodelist=path, node_color="red", node_size=700
        )

        plt.title("Graph with Shortest Path Highlighted", fontsize=14)

    plt.show()


# Main Execution
num_nodes = 100
graph, edges, weights = generate_connected_graph_with_weights(num_nodes)
print_graph(graph)

source, target = random.sample(range(num_nodes), 2)
print(f"\nSource: {source}, Target: {target}")

# Solve with SAT
start_SAT = time.time()
path, weight = solve_shortest_path_sat_weighted(graph, source, target, num_nodes, weights)
end_SAT = time.time()
print(f"\nSAT Total Time: {end_SAT - start_SAT:.4f} seconds")
if path:
    print(f"Shortest Path with SAT: {' -> '.join(map(str, path))}, Total Weight: {weight}")
else:
    print("No path found with SAT.")

# Solve with Dijkstra's Algorithm
path_dijkstra,weight_dij = dijkstra_shortest_path(graph, source, target)
if path_dijkstra:
    print(f"Shortest Path with Dijkstra's: {' -> '.join(map(str, path_dijkstra))}, Total Weight: {weight_dij}")
    # visualize_graph_with_path(graph, path_dijkstra)
else:
    print("No path found with Dijkstra's.")
